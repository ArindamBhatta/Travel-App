import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';
import 'package:travel_app/common/utils/google_login_provider.dart';
import 'package:travel_app/features/contribution_page/specific_user_post_details.dart';
import 'package:travel_app/features/home_page/interface/widgets/app_bar_Content.dart';
import 'post_data_in_community.dart';

class UserContributionPage extends StatefulWidget {
  @override
  State<UserContributionPage> createState() => _UserContributionPageState();
}

class _UserContributionPageState extends State<UserContributionPage> {
  //* properties
  final GlobalKey<FormState> formKey = GlobalKey<FormState>();
  String? location;
  String? state;
  String? country;
  String? imageUrl;
  String? userUid;

  //* Loading UI
  void _showLoadingDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          child: Padding(
            padding: const EdgeInsets.all(20.0),
            child: Column(
              mainAxisSize:
                  MainAxisSize.min, // Ensures it doesn't take full screen
              children: [
                CircularProgressIndicator(),
                SizedBox(height: 20),
                Text(
                  'Submission in progress. Please wait...',
                  textAlign: TextAlign.center,
                  style: TextStyle(fontSize: 16),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  //* upload data in fireStore onTap
  void submitFormAndUploadDataInFireStore() async {
    if (formKey.currentState!.validate()) {
      formKey.currentState!.save();
      _showLoadingDialog(); //* Show the loading dialog

      try {
        /* 
          * Upload data to Firestore, when we needs to generate unique id by our self
            await FirebaseFirestore.instance
                .collection('destinations')
                .doc('randomId')
                .set(
              {
                'location': location,
                'state': state,
                'country': country,
                'image': imageUrl,
                'timestamp': FieldValue.serverTimestamp(),
              },
            ); 
        */
        DocumentReference<Map<String, dynamic>> reference =
            FirebaseFirestore.instance.collection('users').doc(userUid);
        print("get the reference id üëçüëçüëçüëçüëç -----------$userUid");

        //! write in firestore, where unique id is generated by firestore

        await FirebaseFirestore.instance
            .collection('/destinations/contributor/data')
            .doc()
            .set(
          {
            'location': location,
            'state': state,
            'country': country,
            'image': imageUrl,
            'userRef': reference,
            'timestamp': FieldValue.serverTimestamp(),
          },
        );

        Navigator.of(context).pop(); //* Close the loading dialog
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              'Form submitted successfully!',
            ),
          ),
        );
        formKey.currentState!.reset();
      } catch (error) {
        print('error is coming from firebase $error');
        Navigator.of(context).pop(); //* Close the loading dialog
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              'Failed to submit form: $error',
            ),
          ),
        );
      }
    }
  }

  void bottomSheetForPostDetails() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true, //* Allows the modal to take more space
      builder: (modalBottomSheetContext) {
        return DraggableScrollableSheet(
          expand: false,
          initialChildSize: 0.60,
          maxChildSize: 0.60,
          minChildSize: 0.60,
          builder: (context, scrollController) {
            //* User Post method is trigger from hear
            return PostDataToCommunity(
              globalKey: formKey,
              onTapToSaveFormData: (
                String? location,
                String? state,
                String? country,
                String? imageUrl,
              ) {
                this.location = location;
                this.state = state;
                this.country = country;
                this.imageUrl = imageUrl;
                submitFormAndUploadDataInFireStore();
              },
            );
          },
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    userUid = context.watch<GoogleLoginProvider>().userAccessToken;
    return Scaffold(
      backgroundColor: Colors.white,
      body: SafeArea(
        child: Column(
          children: [
            //* AppBar
            AppBarContent(
              headingText: 'Upload Your View',
            ),
            //! Read Data from firestore
            //* Body: - Get the Firebase instance and constantly listen to firebase if any change notify
            Expanded(
              child: StreamBuilder<QuerySnapshot>(
                stream: FirebaseFirestore.instance
                    .collection(
                      '/destinations/contributor/data', //* collection path
                    )
                    .orderBy(
                      'timestamp',
                      descending: true, //* descending order -> 10,9,8....
                    )
                    .snapshots(), //* this method connect Stream Api

                builder: (BuildContext context,
                    AsyncSnapshot<QuerySnapshot<Object?>> snapshot) {
                  //*snapshot is a wrapper around your data with some useful properties.
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return Center(
                      child: CircularProgressIndicator(),
                    );
                  }
                  if (snapshot.data!.docs.isEmpty) {
                    return Center(
                      child: Text(
                        'No destinations found.',
                      ),
                    );
                  }
                  if (snapshot.hasError) {
                    return Center(
                      child: Text('An error occurred: ${snapshot.error}'),
                    );
                  }

                  final destination = snapshot.data!.docs;
                  return ListView.builder(
                    itemCount: destination.length,
                    itemBuilder: (context, index) {
                      final rawData = destination[index].data();
                      print(
                          'rowData run time time for details page ${rawData.runtimeType}');
                      if (rawData == null) {
                        return Center(
                          child: Text(
                            'No data available for this document.',
                          ),
                        );
                      }
                      final data =
                          rawData as Map<String, dynamic>; // Safe to cast now
                      print(
                        'data runtime type for details page: ${data.runtimeType}',
                      );

                      return SpecificUserPostDetails(
                        imageUri: data['image'],
                        country: data['country'],
                        location: data['location'],
                        state: data['state'],
                        userReferenceToCard: data['userRef'],
                      );
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        backgroundColor: Colors.blue[800],
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(30.0),
        ),
        elevation: 20.0,
        onPressed: () {
          bottomSheetForPostDetails();
        },
        child: Icon(
          Icons.add_rounded,
          color: Colors.white,
          size: 30,
        ),
      ),
    );
  }
}
