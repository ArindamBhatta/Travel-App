import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:animations/animations.dart';
import 'package:travel_app/features/introduction_page/model/google_login_provider.dart';
import 'package:travel_app/features/user_contribution_page/specific_user_read_contribution.dart';
import 'contribution_from.dart';

class UserContributionPage extends StatefulWidget {
  @override
  State<UserContributionPage> createState() => _UserContributionPageState();
}

class _UserContributionPageState extends State<UserContributionPage> {
  //* properties

  final GlobalKey<FormState> formKey = GlobalKey<FormState>();
  String? location;
  String? state;
  String? country;
  String? imageUrl;
  String? description;
  String? userUid;
  DocumentReference? referenceOfDestination_Contributor;
  DocumentReference? createReferenceOfaParticularUserPost;
  DocumentReference? referenceOfaParticularUser;

  final ContainerTransitionType _transitionType = ContainerTransitionType.fade;
  final double fabDimension = 56.0;

  //* Loading UI
  void _showLoadingDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          child: Padding(
            padding: const EdgeInsets.all(20.0),
            child: Column(
              mainAxisSize:
                  MainAxisSize.min, // Ensures it doesn't take full screen
              children: [
                CircularProgressIndicator(),
                SizedBox(height: 20),
                Text(
                  'Submission in progress. Please wait...',
                  textAlign: TextAlign.center,
                  style: TextStyle(fontSize: 16),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  //* upload data in fireStore onTap
  void submitFormAndUploadDataInFireStore() async {
    if (formKey.currentState!.validate()) {
      formKey.currentState!.save();
      _showLoadingDialog(); //* Show the loading dialog

      try {
        referenceOfaParticularUser =
            FirebaseFirestore.instance.collection('users').doc(userUid);

        //* write in firestore contributor document, where unique id is generated by firestore
        //* take the whole document reference contributor data
        referenceOfDestination_Contributor = await FirebaseFirestore.instance
            .collection('/destinations/contributor/data')
            .doc();

        await referenceOfDestination_Contributor?.set(
          {
            'id': referenceOfDestination_Contributor?.id,
            'location': location,
            'state': state,
            'country': country,
            'image': imageUrl,
            'description': description,
            'userRef':
                referenceOfaParticularUser, //* show user data in details page
            'timestamp': FieldValue.serverTimestamp(),
          },
        );

        //*Specific user contribution Location image show in this page.
        createReferenceOfaParticularUserPost = await FirebaseFirestore.instance
            .collection('users/$userUid/contributions')
            .add(
          {
            'myContribution': referenceOfDestination_Contributor,
          },
        );

        Navigator.of(context).pop(); //* Close the loading dialog

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              'Form submitted successfully!',
            ),
          ),
        );

        formKey.currentState!.reset();
      } catch (error) {
        print('error is coming from firebase $error');
        Navigator.of(context).pop(); //* Close the loading dialog
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              'Failed to submit form: $error',
            ),
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    userUid = GoogleLoginProvider.accessToken;
    return Scaffold(
      appBar: AppBar(
        title: Center(
          child: Text(
            'My Contribution',
          ),
        ),
      ),
      body: Column(
        children: [
          StreamBuilder<QuerySnapshot>(
              stream: FirebaseFirestore.instance
                  .collection('users/$userUid/contributions')
                  .snapshots(), //* Stream wants the documents. meaning Map<String, dynamic> value not the path.
              builder: (_, AsyncSnapshot<QuerySnapshot> snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Center(
                    child: CircularProgressIndicator(),
                  );
                } else if (snapshot.hasError) {
                  return Center(
                    child: Text(
                      'unable to fetch data right now, try again later .',
                    ),
                  );
                } else if (snapshot.hasData) {
                  final List<QueryDocumentSnapshot> allPostReference =
                      snapshot.data!.docs;

                  return Expanded(
                    child: ListView.builder(
                      itemCount: allPostReference.length,
                      itemBuilder: (context, index) {
                        // QueryDocumentSnapshot qds = allPostReference[index];

                        final individualPostReference =
                            allPostReference[index].data();
                        if (individualPostReference != null) {
                          Map<String, dynamic> jsonData =
                              individualPostReference as Map<String, dynamic>;
                          final reference = jsonData['myContribution'];
                          DocumentReference path =
                              reference as DocumentReference;

                          return SpecificUserReadContribution(
                            userSpecificPost: path,
                          );
                        }
                        return null;
                      },
                    ),
                  );
                } else if (snapshot.data!.docs.isEmpty) {
                  return Center(
                    child: Text('No user  upload their views'),
                  );
                } else {
                  return Center(
                    child: Text("something Happen"),
                  );
                }
              }),
        ],
      ),
      floatingActionButton: OpenContainer(
        transitionDuration: Duration(milliseconds: 800),
        transitionType: _transitionType,
        openBuilder: (BuildContext context, VoidCallback _) {
          return ContributionForm(
            globalKey: formKey,
            onTapToSaveFormData: (
              String? location,
              String? state,
              String? country,
              String? imageUrl,
              String? description,
            ) {
              this.location = location;
              this.state = state;
              this.country = country;
              this.imageUrl = imageUrl;
              this.description = this.description;
              submitFormAndUploadDataInFireStore();
            },
          );
        },
        closedElevation: 6.0,
        //closedColor: const Color.fromARGB(255, 190, 223, 252),
        closedShape: RoundedRectangleBorder(
          borderRadius: BorderRadius.all(
            Radius.circular(fabDimension / 2),
          ),
        ),
        closedBuilder: (BuildContext context, VoidCallback openContainer) {
          return Container(
            height: fabDimension,
            width: fabDimension,
            decoration: BoxDecoration(
              color: Colors.teal,
            ),
            child: Center(
              child: Icon(
                Icons.add,
                color: Colors.white,
              ),
            ),
          );
        },
      ),
    );
  }
}
